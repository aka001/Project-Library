(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Row' object has no attribute 'id'"
p3
sS'layer'
p4
S'/home/ashish/web2py/applications/project/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n@auth.requires_login()\ndef upload():\n\t\tform=SQLFORM(db.project)\n\t\tif form.process().accepted:\n\t\t\tresponse.flash=\'your project is added\'\n\t\treturn dict(form=form)\ndef first():\n    \tif request.vars.upload:\n\t\tredirect(URL(\'upload\'))\n\tcat=db().select(db.project.ALL)\n\tl=db(db.project.id>0).select(db.project.ALL,orderby=~db.project.count_download)\n    \tco=db(db.project.id>0).select(db.project.ALL,orderby=~db.project.count_comment)\n\tpro=db(db.ratecomment.created_by>0).select(db.ratecomment.project_id,orderby=db.ratecomment.rate)\n    \tr=[]\n\tproj=[]\n\tfor i in pro:\n\t    sl=db(db.project.id==i).select(db.project.Name)\n\t    proj.append(sl)\n\treturn dict(proj=proj,co=co,cat=cat,r=r,l=l)\n\ndef show():\n    temp=request.args(0,cast=int)\n    l=db(db.project.id==temp).select(db.project.category)\n    projct=db(db.project.category==l[0][\'category\']).select(db.project.ALL)\n    return dict(l=l,projct=projct)\n\ndef user1():\n    temp=request.args(0,cast=int)\n    downl=db(db.project.id==temp).select(db.project.project)\n    down=downl[0][\'project\']\n    nae=db(db.project.id==temp).select(db.project.Name)\n    name=nae[0][\'Name\']\n    if auth.user:\n    \t   r=db(db.project.id==temp).select(db.project.created_by)\n    \t   l=r[0][\'created_by\']\n    \t   if l!=auth.user_id:\n   \t\t\tflag=1\n   \t   else:\n          \t\tflag=2\n    else:\n    \tflag=0\n    if flag==1:\n    \tdb.ratecomment.created_by.default=auth.user_id\n    c=db(db.project.id==temp).select(db.project.count_download) \t\n    ci=db(db.project.id==temp).select(db.project.count_comment)\n    cv=ci[0][\'count_comment\']\n    if cv not in range(0,1000000):\n\tmy=db(db.project.id==temp)\n\tmy.update(count_comment=0)\n    cn=c[0][\'count_download\']\n    if cn  not in range(0,1000000):\n\tmyset=db(db.project.id==temp)\n\tmyset.update(count_download=0)   \t\n    form=SQLFORM(db.ratecomment)\n    db.ratecomment.project_id.default=temp\n    if form.process().accepted:\n\tresponse.flash=\'your comment is posted\'\n    \tif flag!=2:\n\t\tmyset2=db(db.project.id==temp)\t\n\t\tcom=db(db.project.id==temp).select(db.project.count_comment)\n\t\tcont=com[0][\'count_comment\']+1\n\t\tmyset2.update(count_comment=cont)\n    comment=db(db.ratecomment.project_id==temp).select(db.ratecomment.ALL)\n    return dict(temp=temp,down=down,name=name,flag=flag,form=form,comment=comment)\ndef download():\n\tmyset=db(db.project.id==request.args[1])\n\tc=db(db.project.id==request.args[1]).select(db.project.count_download)\n    \tcn=c[0][\'count_download\']\n\tmyset.update(count_download=cn+1)\n    \tredirect(URL(\'download2\',args=request.args[0]))\ndef download2():\n    \treturn response.download(request,db)\n\nresponse._vars=response._caller(first)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ashish/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/ashish/web2py/applications/project/controllers/default.py", line 150, in <module>\n  File "/home/ashish/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ashish/web2py/applications/project/controllers/default.py", line 93, in first\n    sl=db(db.project.id==i).select(db.project.Name)\n  File "/home/ashish/web2py/gluon/dal.py", line 9769, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/ashish/web2py/gluon/dal.py", line 2222, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/ashish/web2py/gluon/dal.py", line 1667, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/ashish/web2py/gluon/dal.py", line 1577, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/ashish/web2py/gluon/dal.py", line 1356, in expand\n    return op(first, second, **optional_args)\n  File "/home/ashish/web2py/gluon/dal.py", line 1281, in EQ\n    self.expand(second, first.type))\n  File "/home/ashish/web2py/gluon/dal.py", line 1366, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/ashish/web2py/gluon/dal.py", line 1796, in represent\n    return str(int(obj))\n  File "/home/ashish/web2py/gluon/dal.py", line 6800, in __int__\n    return object.__getattribute__(self,\'id\')\nAttributeError: \'Row\' object has no attribute \'id\'\n'
p11
s.